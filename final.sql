-- Part 1: Basic Queries
-- 1. Retrieve Basic Data:
-- Write a query to list the first 10 films, displaying the film_id, title, and release_year.


SELECT film_id, title, release_year
FROM sakila.film
LIMIT 10;


-- Find the total number of customers in the database. 
SELECT COUNT(*) AS total_customers
FROM sakila.customer;

-- 2. Filter Data: 
-- List all movies in the film table released in the year 2006.
SELECT title
FROM sakila.film
WHERE release_year = 2006;

-- Retrieve all customers whose last name starts with the letter “S”. 
SELECT customer_id, first_name, last_name
FROM sakila.customer
WHERE last_name LIKE 'S%';

-- 3. Sort and Limit Results: 
-- Find the top 5 longest movies (length), displaying title and length.
SELECT title, length
FROM sakila.film
ORDER BY length DESC
LIMIT 5;

-- List the 5 most recent rentals, showing rental_id, rental_date, and customer_id.
SELECT rental_id, rental_date, customer_id
FROM sakila.rental
ORDER BY rental_date DESC
LIMIT 5;


-- Part 2: Advanced Queries 
-- 4. Joins:
-- Write a query to find the names of actors who appeared in the movie “Academy Dinosaur”. 

SELECT a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.title = 'Academy Dinosaur';


-- Retrieve a list of customers along with the titles of movies they rented. Include customer_id, first_name, last_name, and title.
 
SELECT c.customer_id, c.first_name, c.last_name, f.title
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;


-- 5. Aggregations: 
-- Find the total revenue generated by all rentals. 
SELECT SUM(amount) AS total_revenue
FROM sakila.payment;

-- Retrieve the number of films in each category, sorted by the category name.

SELECT category.name AS category_name, COUNT(film.film_id) AS film_count
FROM sakila.category, sakila.film_category, sakila.film
WHERE category.category_id = film_category.category_id
  AND film_category.film_id = film.film_id
GROUP BY category.name
ORDER BY category.name;

-- 6. Subqueries: 
-- List the names of customers who have rented more than 30 movies. 

SELECT first_name, last_name
FROM sakila.customer
WHERE customer_id IN (
    SELECT customer_id
    FROM sakila.rental
    GROUP BY customer_id
    HAVING COUNT(*) > 30
);

-- Find all films that have never been rented.
SELECT title
FROM sakila.film
WHERE film_id NOT IN (
    SELECT film_id
    FROM sakila.inventory
    WHERE inventory_id IN (
        SELECT inventory_id
        FROM sakila.rental
    )
);

-- 7. Case Statements
-- Categorize movies based on their length.

SELECT title, length,
    CASE
        WHEN length < 60 THEN 'Short'
        WHEN length BETWEEN 60 AND 120 THEN 'Medium'
        ELSE 'Long'
    END AS length_category
FROM sakila.film;


-- Part 3:  Database Management
-- 8. Insert Data
-- Add a new customer to the customer table with relevant information.
INSERT INTO customer (store_id, first_name, last_name, email, address_id, active, create_date)
VALUES (1, 'Yeab', 'Chhunsann', 'chhunsann.hd@gmail.com', 5, 1, NOW());

SELECT * FROM sakila.customer;


-- Insert a new film into the film table, specifying appropriate values for all columns. 

INSERT INTO sakila.film (title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, special_features, last_update)
VALUES ('ZyyBer Zuu', 'An exciting new movie.', 2024, 1, 3, 4.99, 130, 19.99, 'PG', 'Trailers,Deleted Scenes', NOW());

SELECT * FROM sakila.film LIMIT 0, 1010;

-- 9. Update Data
-- Update the email of a specific customer in the customer table.

UPDATE sakila.customer
SET email = 'bongsann@gmail.com'
WHERE customer_id = 603; -- The customer that just added.

select * from sakila.customer;

-- Change the rental rate for all movies in the film table to 4.99 where the length is greater than 120 minutes
SET SQL_SAFE_UPDATES = 0;

UPDATE film
SET rental_rate = 4.99
WHERE length > 120;

SET SQL_SAFE_UPDATES = 1;


select * from sakila.film where length > 120;

-- 10. Delete Data: 
-- Delete a customer from the customer table who hasn’t rented any movies.

SET SQL_SAFE_UPDATES = 0;
DELETE FROM customer
WHERE customer_id NOT IN (
    SELECT DISTINCT customer_id
    FROM rental
);
SET SQL_SAFE_UPDATES = 1;

-- Remove all movies in the film table that were released before 2000
set SQL_SAFE_UPDATES = 0;

DELETE FROM film
WHERE release_year < 2000;

SET SQL_SAFE_UPDATES = 1;

select * from film where release_year < 2000;

-- Part 4: Reporting and Analysis (Write Query)
-- 11. Create a Report: 
-- Generate a report showing the top 10 customers who rented the most movies. Include customer_id, first_name, last_name, and the number of movies rented.

SELECT customer_id, first_name, last_name, COUNT(*) AS total_rentals
FROM rental
JOIN customer USING (customer_id)
GROUP BY customer_id
ORDER BY total_rentals DESC
LIMIT 10;


-- 12. Revenue Analysis:
-- Calculate the total revenue generated per category. Display the category name and total revenue. 

SELECT name AS category_name, SUM(amount) AS total_revenue
FROM payment
JOIN rental USING (rental_id)
JOIN inventory USING (inventory_id)
JOIN film USING (film_id)
JOIN film_category USING (film_id)
JOIN category USING (category_id)
GROUP BY category_id
ORDER BY total_revenue DESC;

-- 13. Rental Trends:
-- Identify the busiest rental month. Display the month and the total number of rentals during that month.

SELECT MONTHNAME(rental_date) AS rental_month, COUNT(*) AS total_rentals
FROM rental
GROUP BY rental_month
ORDER BY total_rentals DESC
LIMIT 1;

-- Part 5: Views, Indexes, and Stored Procedures
-- 14. Create Views: 
-- Create a view customer_rentals that displays customer information along with the titles of movies they rented.

CREATE VIEW customer_rentals AS
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    f.title
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

-- This is for displaying the customer information along with the titles of movies they rented.
SELECT * FROM sakila.customer_rentals;

-- Create a view category_revenue that shows the total revenue generated by each category.
CREATE VIEW category_revenue AS
SELECT 
    c.name AS category_name, 
    SUM(p.amount) AS total_revenue
FROM payment p
JOIN rental r USING (rental_id)
JOIN inventory i USING (inventory_id)
JOIN film f USING (film_id)
JOIN film_category fc USING (film_id)
JOIN category c USING (category_id)
GROUP BY c.category_id;

-- This is for displaying the total revenue generated by each category.
SELECT * FROM sakila.category_revenue;

-- 15. Create Indexes
-- Create an index on the title column of the film table to optimize search queries. 
CREATE INDEX idx_film_title ON film(title);

-- To verify that we created successful.
SHOW INDEX FROM film;


-- Add an index to the rental_date column of the rental table to speed up date-based searches. 
CREATE INDEX idx_rental_date ON rental(rental_date);

-- To verify that we created successful.
SHOW INDEX FROM rental;

-- 16. Stored Procedure.
-- Write a stored procedure get_customer_rentals that accepts a customer_id as input and returns the list of movies rented by that customer.
DELIMITER $$
CREATE PROCEDURE get_customer_rentals(IN customer_id INT)
BEGIN
    SELECT 
        f.title
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    WHERE r.customer_id = customer_id;
END $$
DELIMITER ;
-- To Execute the Procedure:
CALL get_customer_rentals(1); -- Replace `1` with the desired customer_id














